// двумерные массивы 
// тип данных-в индексаторе ставим запятую(которая указывает на 2 размерности, первая это строки, вторая это столбцы)-
//-далее название массива придумываем, затем знак присваивания и нью далее тип данных тот же что был слева, в квадратных скобках аргументы указываем
//например: двумерный массив где тип данных строки
// string[,] table=new string[2,3]; то есть это таблица
//если тип данных с числами, то будет матрица int[,] matrix=int[5,8]; 

//string[,] table= new string[2,5];
//table[1,2]="слово";      // чтобы обратиться к нужному элементу массива, сначала указываем необходимый индекс строки, затем столбца, в данном случае первая строка и второй столбец
// table[0,0]  table[0,1] table[0,2]....table[0,4] это последний столбик
//table[1,0] так как всего 2 строчки, макс индекс строки это еденица table[1,1] table[1,2] table[1,3] table[1,4]
// по умолчанию для строк инициализация идет константой 
//String.Empty

// for (int rows = 0; rows < 2; rows++)
// {
//     for (int columns = 0; columns < 5; columns++)
//     {
//         Console.WriteLine($"-{table[rows,columns]}-");
//     }
// }

//теперь попробуем заполнить числами и сделать матрицу
//                    0 1
// int[,] matrix=new int[3,4];
// for (int i = 0; i < matrix.GetLength(0) ; i++) //чтобы указать длину и избежать магических чисел используй эту функцию, 0 в качестве аргумента как индекс строки
// {
//     for (int j = 0; j < matrix.GetLength(1) ; j++) // 1 индекс столбца, смотри 25 строку кода
//     {
//         Console.Write($"{matrix[i,j]} ");
//     }
//     Console.WriteLine();
// }

// теперь опишем методы, которые будут  печатать такие таблицы и заполнять

// int[,] matrix=new int[3,4]; // по умолчанию матрица будет заполнена нулями
// void PrintArray(int[,] matr)
// {
//    for (int i = 0; i < matr.GetLength(0); i++)
//    {
//        for (int j = 0; j < matr.GetLength(1) ; j++)
//        {
//            Console.Write($"{matr[i,j]} ");
//        }
//        Console.WriteLine();
//    }
// }
// PrintArray(matrix);
 
 // теперь напишем метод который будет заполнять матрицу числами 

//  void FillArray(int[,] matr)
//  {
//      for (int i = 0; i < matr.GetLength(0) ; i++)
//      {
//          for (int j = 0; j < matr.GetLength(1) ; j++)
//          {
//              matr[i,j]=new Random().Next(1,10);
//          }
//      }
//  }
//  FillArray(matrix);
//  Console.WriteLine();
//  PrintArray(matrix);

// рисуем палец и заливаем контур
//сначала определяыем точку внутри замкнутого контура
//определяем как будем делатьобход внутренних точек
//если точка не закрашена, закрась
//правило обхода: вверх, влево, вниз, вправо
// как показать обход: вверх это {х-1,y}( т е выше на одну строку) вниз это {X+1,Y} те ниже на одну строку
// вправо это {x,y+1} т е вправо на один столбец, влево это {x,y-1} т е влево на один столбец
// можно по диагонали, но это дополнительные условия
//т е обход вверх, влево, вниз, вправо, выглядит так: {х-1,y} {x,y-1} {X+1,Y} {x,y+1}

//печатаем массив из нулей и единиц 
// int[,] pic =new int[,] 
// {
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },

//     {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };
// void PrintImage(int[,] image)
// {
//    for (int i = 0; i < image.GetLength(0); i++)
//    {
//        for (int j = 0; j < image.GetLength(1) ; j++)
//        {
//            if(image[i,j]==0 ) Console.Write($" ");
//            else
//             Console.WriteLine($"+");
//        }
//        Console.WriteLine();
//    }
// }

// void FillImage(int row,int col)
// {
//     if(pic[row,col]==0)  //если пиксель в случайной точке не закрашен, т е равен 0, то закрасить его, те присвоить 1
//     {
//     pic[row,col]=1;
//     FillImage(row-1,col);  // далее правило обхода, через рекурсию
//     FillImage(row,col-1);
//     FillImage(row+1,col);
//     FillImage(row-1,col); // затем снова проверка условия
//     }
// }

// PrintImage(pic);
// FillImage(13,13);   //указываем случайную точку с которой будем начинать закраску
// PrintImage(pic);


//                                         Рекурсия!!!!
double Factorial(int n) //напишем метод поиска факториала используя рекурсию
{
    if(n==1)return 1;  // т к факториал 1=1 как и фа-л 0=1
    else return n* Factorial(n-1);

}
for (int i = 1; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial(i)}");
}

//                                    числа Фибоначи это рекурсия
// f(1)=1
//f(2)=1
//f(n)=f(n-1)+f(n-2)

// double Fibonacci(int n)
// {
//   if( n==1||n==2) return 1;
//   else return Fibonacci(n-1)+ Fibonacci(n-2);

// }
// for (int i = 1; i < 50; i++)
// {
//     Console.WriteLine($"f({i})={Fibonacci(i)}");

// }